// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/runtime.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VGPURuntimeRequest struct {
	Ctruuid              string   `protobuf:"bytes,1,opt,name=ctruuid,proto3" json:"ctruuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VGPURuntimeRequest) Reset()         { *m = VGPURuntimeRequest{} }
func (m *VGPURuntimeRequest) String() string { return proto.CompactTextString(m) }
func (*VGPURuntimeRequest) ProtoMessage()    {}
func (*VGPURuntimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e1a7998f4db04c8, []int{0}
}
func (m *VGPURuntimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VGPURuntimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VGPURuntimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VGPURuntimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VGPURuntimeRequest.Merge(m, src)
}
func (m *VGPURuntimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *VGPURuntimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VGPURuntimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VGPURuntimeRequest proto.InternalMessageInfo

func (m *VGPURuntimeRequest) GetCtruuid() string {
	if m != nil {
		return m.Ctruuid
	}
	return ""
}

type VGPURuntimeReply struct {
	Devlist              string   `protobuf:"bytes,1,opt,name=devlist,proto3" json:"devlist,omitempty"`
	PodNamespace         string   `protobuf:"bytes,2,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	PodId                string   `protobuf:"bytes,3,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty"`
	CtrName              string   `protobuf:"bytes,4,opt,name=ctr_name,json=ctrName,proto3" json:"ctr_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VGPURuntimeReply) Reset()         { *m = VGPURuntimeReply{} }
func (m *VGPURuntimeReply) String() string { return proto.CompactTextString(m) }
func (*VGPURuntimeReply) ProtoMessage()    {}
func (*VGPURuntimeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e1a7998f4db04c8, []int{1}
}
func (m *VGPURuntimeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VGPURuntimeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VGPURuntimeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VGPURuntimeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VGPURuntimeReply.Merge(m, src)
}
func (m *VGPURuntimeReply) XXX_Size() int {
	return m.Size()
}
func (m *VGPURuntimeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VGPURuntimeReply.DiscardUnknown(m)
}

var xxx_messageInfo_VGPURuntimeReply proto.InternalMessageInfo

func (m *VGPURuntimeReply) GetDevlist() string {
	if m != nil {
		return m.Devlist
	}
	return ""
}

func (m *VGPURuntimeReply) GetPodNamespace() string {
	if m != nil {
		return m.PodNamespace
	}
	return ""
}

func (m *VGPURuntimeReply) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

func (m *VGPURuntimeReply) GetCtrName() string {
	if m != nil {
		return m.CtrName
	}
	return ""
}

func init() {
	proto.RegisterType((*VGPURuntimeRequest)(nil), "api.VGPURuntimeRequest")
	proto.RegisterType((*VGPURuntimeReply)(nil), "api.VGPURuntimeReply")
}

func init() { proto.RegisterFile("pkg/api/runtime.proto", fileDescriptor_1e1a7998f4db04c8) }

var fileDescriptor_1e1a7998f4db04c8 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xc8, 0x4e, 0xd7,
	0x4f, 0x2c, 0xc8, 0xd4, 0x2f, 0x2a, 0xcd, 0x2b, 0xc9, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0xd2, 0xe3, 0x12, 0x0a, 0x73, 0x0f, 0x08, 0x0d, 0x82,
	0xc8, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x70, 0xb1, 0x27, 0x97, 0x14, 0x95,
	0x96, 0x66, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a, 0xcd, 0x8c, 0x5c,
	0x02, 0x28, 0x1a, 0x0a, 0x72, 0x2a, 0x41, 0xca, 0x53, 0x52, 0xcb, 0x72, 0x32, 0x8b, 0x4b, 0x60,
	0xca, 0xa1, 0x5c, 0x21, 0x65, 0x2e, 0xde, 0x82, 0xfc, 0x94, 0xf8, 0xbc, 0xc4, 0xdc, 0xd4, 0xe2,
	0x82, 0xc4, 0xe4, 0x54, 0x09, 0x26, 0xb0, 0x3c, 0x4f, 0x41, 0x7e, 0x8a, 0x1f, 0x4c, 0x4c, 0x48,
	0x94, 0x8b, 0x0d, 0xa4, 0x28, 0x33, 0x45, 0x82, 0x19, 0x2c, 0xcb, 0x5a, 0x90, 0x9f, 0xe2, 0x99,
	0x22, 0x24, 0xc9, 0xc5, 0x91, 0x5c, 0x52, 0x04, 0xd6, 0x2b, 0xc1, 0x02, 0x77, 0x05, 0x48, 0x9b,
	0x51, 0x00, 0x17, 0x37, 0x92, 0x23, 0x84, 0x1c, 0xb9, 0x78, 0x41, 0x5c, 0xf7, 0xd4, 0x12, 0x97,
	0xd4, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x71, 0xbd, 0xc4, 0x82, 0x4c, 0x3d, 0x4c, 0x8f, 0x49, 0x89,
	0x62, 0x4a, 0x14, 0xe4, 0x54, 0x2a, 0x31, 0x38, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x43, 0xc9, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xf5, 0x3a, 0xaa, 0x3e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VGPURuntimeClient is the client API for VGPURuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VGPURuntimeClient interface {
	VGPUGetDevice(ctx context.Context, in *VGPURuntimeRequest, opts ...grpc.CallOption) (*VGPURuntimeReply, error)
}

type vGPURuntimeClient struct {
	cc *grpc.ClientConn
}

func NewVGPURuntimeClient(cc *grpc.ClientConn) VGPURuntimeClient {
	return &vGPURuntimeClient{cc}
}

func (c *vGPURuntimeClient) VGPUGetDevice(ctx context.Context, in *VGPURuntimeRequest, opts ...grpc.CallOption) (*VGPURuntimeReply, error) {
	out := new(VGPURuntimeReply)
	err := c.cc.Invoke(ctx, "/api.VGPURuntime/VGPUGetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VGPURuntimeServer is the server API for VGPURuntime service.
type VGPURuntimeServer interface {
	VGPUGetDevice(context.Context, *VGPURuntimeRequest) (*VGPURuntimeReply, error)
}

// UnimplementedVGPURuntimeServer can be embedded to have forward compatible implementations.
type UnimplementedVGPURuntimeServer struct {
}

func (*UnimplementedVGPURuntimeServer) VGPUGetDevice(ctx context.Context, req *VGPURuntimeRequest) (*VGPURuntimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VGPUGetDevice not implemented")
}

func RegisterVGPURuntimeServer(s *grpc.Server, srv VGPURuntimeServer) {
	s.RegisterService(&_VGPURuntime_serviceDesc, srv)
}

func _VGPURuntime_VGPUGetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VGPURuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VGPURuntimeServer).VGPUGetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VGPURuntime/VGPUGetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VGPURuntimeServer).VGPUGetDevice(ctx, req.(*VGPURuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VGPURuntime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.VGPURuntime",
	HandlerType: (*VGPURuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VGPUGetDevice",
			Handler:    _VGPURuntime_VGPUGetDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/runtime.proto",
}

func (m *VGPURuntimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VGPURuntimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VGPURuntimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ctruuid) > 0 {
		i -= len(m.Ctruuid)
		copy(dAtA[i:], m.Ctruuid)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Ctruuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VGPURuntimeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VGPURuntimeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VGPURuntimeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CtrName) > 0 {
		i -= len(m.CtrName)
		copy(dAtA[i:], m.CtrName)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.CtrName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PodId) > 0 {
		i -= len(m.PodId)
		copy(dAtA[i:], m.PodId)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.PodId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Devlist) > 0 {
		i -= len(m.Devlist)
		copy(dAtA[i:], m.Devlist)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Devlist)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRuntime(dAtA []byte, offset int, v uint64) int {
	offset -= sovRuntime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VGPURuntimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ctruuid)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VGPURuntimeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Devlist)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.PodId)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	l = len(m.CtrName)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRuntime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRuntime(x uint64) (n int) {
	return sovRuntime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VGPURuntimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VGPURuntimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VGPURuntimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctruuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctruuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VGPURuntimeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VGPURuntimeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VGPURuntimeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devlist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtrName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRuntime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRuntime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRuntime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRuntime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRuntime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRuntime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRuntime = fmt.Errorf("proto: unexpected end of group")
)
